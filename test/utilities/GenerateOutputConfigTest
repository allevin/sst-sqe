pushd test/testSuites

#
#    SST_ONE_OUTPUT_CONFIG     is the "one Suite" environment variable
#
 
if [ $? != 0 ] ; then
    echo "   ################################################################################ "
    echo "   cd failed    === needs to find test"
    echo "  Must be issue with Directory structure or pwd"
    echo "    PWD is `pwd`"
    echo "   ################################################################################ "
    exit 
fi

echo "            Modifying test Suites to write output-config python files and then test them"

## testSuite_SweepEmber.sh  SPECIAL CASE 

for fn in  testSuite_Ariel.sh  testSuite_cassini_prefetch.sh  testSuite_check_maxrss.sh  testSuite_hybridsim.sh  testSuite_iris.sh  testSuite_M5.sh  testSuite_memHierarchy_bin.sh  testSuite_memHierarchy_sdl.sh  testSuite_merlin.sh testSuite_openMP.sh  testSuite_patterns.sh  testSuite_portals.sh  testSuite_prospero.sh  testSuite_qsimComponent.sh  testSuite_scheduler.sh  testSuite_simpleComponent.sh  testSuite_SiriusZodiacTrace.sh  testSuite_sst_mcniagara.sh testSuite_sst_mcopteron.sh  testSuite_VaultSim.sh testSuite_diropenMP.sh testSuite_dirSweep.sh testSuite_embernightly.sh  testSuite_stream.sh testSuite_Sweep_openMP.sh testSuite_zoltan.sh testSuite_noncacheable_openMP.sh testSuite_cacheTracer.sh testSuite_chdlComponent.sh testSuite_dirnoncacheable_openMP.sh testSuite_memHSieve.sh testSuite_miranda.sh testSuite_partitioner.sh testSuite_simpleClockerComponent.sh testSuite_simpleDistribComponent.sh testSuite_simpleLookupTableComponent.sh testSuite_simpleMessageGeneratorComponent.sh testSuite_simpleRNGComponent.sh testSuite_simpleStatisticsComponent.sh testSuite_scheduler_DetailedNetwork.sh 
do 

if [[ ${SST_ONE_OUTPUT_CONFIG:+isSet} == isSet ]]
then 
    SUITE=${SST_ONE_OUTPUT_CONFIG}
    if [[ $fn == *${SUITE}* ]] ; then
        echo Doing $fn
    else
        continue
    fi
fi

git checkout -- $fn          # Restore the Suite.

                         #  Remember insert goes BEFORE!
sed -i'.sd' '/sut.*sutArgs/i \
if [ `echo $sutArgs | wc -w` != 1 ] ; then \
echo "########################################################" \
echo "#" \
echo "#   SUTARGS = $sutArgs " \
echo "#" \
echo "########################################################" \
fi \
2Breplaced --run-mode init > ${outFile}0 2>$errFilex \
if [ $? != 0 ] ; then \
     fail "Write of Python file from original input failed" \
     echo "      -------- stderr follows ----- "  \
     cat $errFilex \
     echo " " \
     wc ${outFile}0 \
     wc $pyFile \
     echo " - - - - - - - -   Abandoning  $testDataFileBase " \
     echo " " \
     return 1 \
fi \
echo "   Generated new python file:   ls, wc, and cksum" \
ls -l $pyFile \
wc $pyFile \
cksum $pyFile \
echo "Done with step 1 building pyFile" \

 ' $fn

sed -i'.se' '/sut.*sutArgs/s/.sutArgs./pyFile/' $fn

sed -i'.sf' 's/2Breplaced/${sut} --output-config $pyFile ${sutArgs}/' $fn
 
sed -i'.sg' '/outFile=/i \
pyFile="${SST_TEST_INPUTS}/${testDataFileBase}.py" \
errdiff="${SST_TEST_OUTPUTS}/${testDataFileBase}.errdiff" \
errFilex="${SST_TEST_OUTPUTS}/${testDataFileBase}.errx" \
 ' $fn

sed -i'.sh' 's/export SST_TEST_ONE_TEST_TIMEOUT=/export SST_TEST_ONE_TEST_TIMEOUT=1/' $fn
rm ${fn}.??
## grep Done.with -B 6 -A 6 $fn
done

popd

